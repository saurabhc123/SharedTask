package esl;

import java.util.LinkedList;
import java.util.Set;
import LBJ2.nlp.*;
import LBJ2.nlp.seg.Token;
import LBJ2.nlp.pos.POSTagger;


discrete source(Preposition p) <- 
{
	return p.getFeature("source");
}

discrete% wBefore(Preposition p) <-
{
   if ((p.getFeature("wBefore")).endsWith("NA")==false)
      sense p.getFeature("wBefore");
}
discrete% wAfter(Preposition p) <-
{
   if ((p.getFeature("wAfter")).endsWith("NA")==false)
      sense p.getFeature("wAfter");
}
discrete% wBWA(Preposition p) <-
{
   if ((p.getFeature("wBWA")).endsWith("NA")==false)
      sense p.getFeature("wBWA");
}
discrete% w2BWB(Preposition p) <-
{
   if ((p.getFeature("w2BWB")).endsWith("NA")==false)
      sense p.getFeature("w2BWB");
}
discrete% wAW2A(Preposition p) <-
{
   if ((p.getFeature("wAW2A")).endsWith("NA")==false)
      sense p.getFeature("wAW2A");
}
discrete% wAW2AW3A(Preposition p) <-
{
   if ((p.getFeature("wAW2AW3A")).endsWith("NA")==false)
      sense p.getFeature("wAW2AW3A");
}
discrete% w2BwBwA(Preposition p) <-
{
   if ((p.getFeature("w2BwBwA")).endsWith("NA")==false)
      sense p.getFeature("w2BwBwA");
}
discrete% wBwAw2A(Preposition p) <-
{
   if ((p.getFeature("wBwAw2A")).endsWith("NA")==false)
      sense p.getFeature("wBwAw2A");
}
discrete% w3Bw2BwB(Preposition p) <-
{
   if ((p.getFeature("w3Bw2BwB")).endsWith("NA")==false)
      sense p.getFeature("w3Bw2BwB");
}
discrete% w4Bw3Bw2BwB(Preposition p) <-
{
   if ((p.getFeature("w4Bw3Bw2BwB")).endsWith("NA")==false)
      sense p.getFeature("w4Bw3Bw2BwB");
}
discrete% w3Bw2BwBwA(Preposition p) <-
{
   if ((p.getFeature("w3Bw2BwBwA")).endsWith("NA")==false)
      sense p.getFeature("w3Bw2BwBwA");
}
discrete% w2BwBwAw2A(Preposition p) <-
{
   if ((p.getFeature("w2BwBwAw2A")).endsWith("NA")==false)
      sense p.getFeature("w2BwBwAw2A");
}
discrete% wBwAw2Aw3A(Preposition p) <-
{
   if ((p.getFeature("wBwAw2Aw3A")).endsWith("NA")==false)
      sense p.getFeature("wBwAw2Aw3A");
}
discrete% wAw2Aw3Aw4A(Preposition p) <-
{
   if ((p.getFeature("wAw2Aw3Aw4A")).endsWith("NA")==false)
      sense p.getFeature("wAw2Aw3Aw4A");
}

discrete PLabel(Preposition p) <- { return p.label; }

discrete PrepositionUnconfuse(Preposition p) <-
learn PLabel
  using
	wBefore, wAfter, w2BWB, wBWA, wAW2A, w3Bw2BwB, w2BwBwA, wBwAw2A, wAW2AW3A
  from new PrepositionParser(new ColumnFormat(Constants.trainingData))
   1 rounds
with NaiveBayes { smoothing = -15; }
  progressOutput 100000
end

