package esl;

import java.util.LinkedList;
import java.util.Set;
import LBJ2.nlp.*;
import LBJ2.nlp.seg.Token;
import LBJ2.nlp.pos.POSTagger;


discrete source(Preposition p) <- 
{
	return p.getFeature("source");
}

discrete% wBefore(Preposition p) <-
{
   if ((p.getFeature("wBefore")).endsWith("NA")==false)
      sense p.getFeature("wBefore");
}
discrete% wAfter(Preposition p) <-
{
   if ((p.getFeature("wAfter")).endsWith("NA")==false)
      sense p.getFeature("wAfter");
}
discrete% wBeforeWAfter(Preposition p) <-
{
   if ((p.getFeature("wBeforeWAfter")).endsWith("NA")==false)
      sense p.getFeature("wBeforeWAfter");
}
discrete% w2BeforeWBefore(Preposition p) <-
{
   if ((p.getFeature("w2BeforeWBefore")).endsWith("NA")==false)
      sense p.getFeature("w2BeforeWBefore");
}
discrete% wAfterW2After(Preposition p) <-
{
   if ((p.getFeature("wAfterW2After")).endsWith("NA")==false)
      sense p.getFeature("wAfterW2After");
}
discrete% wAfterW2AfterW3After(Preposition p) <-
{
   if ((p.getFeature("wAfterW2AfterW3After")).endsWith("NA")==false)
      sense p.getFeature("wAfterW2AfterW3After");
}
discrete% w2BwBwA(Preposition p) <-
{
   if ((p.getFeature("w2BwBwA")).endsWith("NA")==false)
      sense p.getFeature("w2BwBwA");
}
discrete% wBwAw2A(Preposition p) <-
{
   if ((p.getFeature("wBwAw2A")).endsWith("NA")==false)
      sense p.getFeature("wBwAw2A");
}
discrete% w3Bw2BwB(Preposition p) <-
{
   if ((p.getFeature("w3Bw2BwB")).endsWith("NA")==false)
      sense p.getFeature("w3Bw2BwB");
}

discrete PLabel(Preposition p) <- { return p.label; }

discrete PrepositionUnconfuse(Preposition p) <-
learn PLabel
  using
	wBefore, wAfter, wBeforeWAfter, w2BeforeWBefore, wAfterW2After, w2BwBwA, wBwAw2A
  from new PrepositionParser(new ColumnFormat(Constants.trainingData))
   1 rounds
with NaiveBayes { smoothing = -15; }
  progressOutput 100000
end

